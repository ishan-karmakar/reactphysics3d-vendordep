import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'maven-publish'

ext.licenseFile = files("$rootDir/LICENSE.txt")

def templateVendorFile = "ReactPhysics3D.json"
def releasesDir = "releases"

def pubVersion = '0.0.1'

def outputsFolder = file("$buildDir/outputs")

def versionFile = file("$outputsFolder/version.txt")

task outputVersions() {
    description = 'Prints the versions of wpilib to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

task libraryBuild() {}

build.dependsOn outputVersions

task copyAllOutputs(type: Copy) {
    destinationDir file("$buildDir/allOutputs")
    from versionFile
    dependsOn outputVersions
}

build.dependsOn copyAllOutputs
copyAllOutputs.dependsOn outputVersions

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archiveFile
    copyAllOutputs.from task.archiveFile
}

def artifactGroupId = 'org.valor'
def baseArtifactId = 'rp3d'
def zipBaseName = "_GROUP_org_valor_ID_${baseArtifactId}-cpp_CLS"

task cppHeadersZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    archiveClassifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/include') {
        into '/'
    }
}

task cppSourceZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    archiveClassifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/cpp') {
        into '/'
    }
}

build.dependsOn cppHeadersZip
addTaskToCopyAllOutputs(cppHeadersZip)
build.dependsOn cppSourceZip
addTaskToCopyAllOutputs(cppSourceZip)

// Apply template variables from the vendordep file.
// Replaces ${VARIABLE} with VARIABLE: value in expand()
task vendordepJson() {
    description = 'Builds the vendordep json file.'
    group = 'Build'
    outputs.file(templateVendorFile)

    copy {
        from "src/$templateVendorFile"
        into rootDir
        expand(version: pubVersion,
                groupId: artifactGroupId,
                artifactId: baseArtifactId)
    }
}

task vendordepJsonZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = "vendordepJson"

    from(templateVendorFile) {
        into '/'
    }
    dependsOn vendordepJson
}

addTaskToCopyAllOutputs(vendordepJsonZip)

build.dependsOn vendordepJsonZip

libraryBuild.dependsOn build

publishing {
    repositories {
        maven {
            url = releasesDir
        }
    }
}

model {
    publishing {
        def taskList = createComponentZipTasks($.components, ['Vendor'], zipBaseName, Zip, project, includeStandardZipFormat)

        publications {
            cpp(MavenPublication) {
                taskList.each {
                    artifact it
                }
                artifact cppHeadersZip
                artifact cppSourceZip

                artifactId = "${baseArtifactId}-cpp"
                groupId artifactGroupId
                version pubVersion
            }

            vendordep(MavenPublication) {
                artifact vendordepJsonZip

                artifactId = "${baseArtifactId}-vendordep"
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}
